/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 06 17:23:47 ART 2020
 */

package tp1.automatas;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import java.util.Set;

import org.junit.BeforeClass;
import org.junit.Test;
import tp1.utils.DotReader;
import tp1.utils.Tupla;

public class FAMethodsTest  {

  private static DFA dfa;
  private static StateSet s;
	private static Alphabet a;
  private static Set<Tupla<State,Character,State>> t;

  @BeforeClass
  public static void test() throws Exception {

    DotReader dotReader = new DotReader("src/test/java/tp1/dfa5");
		 dotReader.parse();
		 s = dotReader.getNodes();
		 a = dotReader.getSymbols();
     t = dotReader.getArcs();
     dfa = new DFA(s,a,t);

    // System.out.println("STATES ------------> " + dfa.getStates().toString());
    // System.out.println("ALPABEHT ---------->" + dfa.getAlphabet().toString());
    // System.out.println("-----------------------------------------------------------");
    // System.out.println("DELTA -----> " + dfa.delta.toString());
    // System.out.println("-----------------------------------------------------------");
    // System.out.println("initial state  ------------> " + dfa.initialState().toString());
    // System.out.println("final state  ------------> " + dfa.finalStates().toString());
    // System.out.println("--------------- verify string -----------------");
    // System.out.println(dfa.verifyString("ab"));
    // System.out.println(dfa.verifyString("aaaa"));
    // System.out.println(dfa.verifyString("bbbbb"));
    // System.out.println(dfa.verifyString("ccccc"));
    // System.out.println("--------------- repOk() methods -----------------");
    // System.out.println(dfa.countInitialState());
    // System.out.println(dfa.checkLamdaTransitions());
    // System.out.println(dfa.checkAllTransitionCorrect());
    assertTrue(true);
  }

  @Test
  public void testState() {
    assertEquals(3, dfa.getStates().size());
  }

  @Test
  public void testAlpabeht() {
    assertEquals("[a, b]" , dfa.getAlphabet().toString());
  }

  @Test
  public void testInitialState() {
    assertEquals("q0", dfa.initialState().getName());
  }

  @Test
  public void testFinalState() throws AutomatonException {
    assertEquals(1, dfa.finalStates().size());
  }

  @Test
  public void testVerifyStringValid() {
    assertTrue(dfa.verifyString(""));
    assertTrue(dfa.verifyString("ab"));
    assertTrue(dfa.verifyString("aaaa"));
    assertTrue(dfa.verifyString("bbbbb"));
    assertFalse(dfa.verifyString("bc"));
    assertFalse(dfa.verifyString("cd"));
  }

  @Test
  public void testVerifyStringNotValid() {
    try {
      dfa.verifyString(null);
    } catch (Exception e) {
      assertEquals("String not valid", e.getMessage());
    }
  }

  @Test
  public void testCountInitialState() {
    assertEquals(1, dfa.countInitialState());
  }

  @Test
  public void testCheckLamdaTransitions() {
    assertFalse(dfa.checkLamdaTransitions());
  }

  @Test
  public void testCheckAllTransitionCorrect() {
    assertTrue(dfa.checkAllTransitionCorrect());
  }

  @Test
  public void testCheckTransitionRelationDeterministic() {
    assertTrue(dfa.checkTransitionRelationDeterministic());
  }

}
